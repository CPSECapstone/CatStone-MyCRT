class mockBoto:

    class mockRDS:

        def describe_db_instances(self):
            exampleResponse = {'ResponseMetadata': {'HTTPStatusCode': 200, 'RequestId': '28ce93d0-ed9d-4999-a067-fa1e91fa294e', 'HTTPHeaders': {'content-type': 'text/xml', 'x-amzn-requestid': '28ce93d0-ed9d-4999-a067-fa1e91fa294e', 'vary': 'Accept-Encoding', 'content-length': '7680', 'date': 'Mon, 22 Jan 2018 23:16:30 GMT'}, 'RetryAttempts': 0}, 'DBInstances': [{'LatestRestorableTime': datetime.datetime(2018, 1, 22, 23, 10, tzinfo=tzutc()), 'DomainMemberships': [], 'LicenseModel': 'general-public-license', 'AllocatedStorage': 20, 'PreferredBackupWindow': '09:30-10:00', 'InstanceCreateTime': datetime.datetime(2017, 11, 27, 4, 20, 56, 37000, tzinfo=tzutc()), 'BackupRetentionPeriod': 7, 'DBInstanceIdentifier': 'test1', 'PendingModifiedValues': {}, 'MasterUsername': 'testMaster', 'DbiResourceId': 'db-HQ43YQE4RYSBKAQUK665W6PUAY', 'DbInstancePort': 0, 'Endpoint': {'HostedZoneId': 'Z10WI91S59XXQN', 'Address': 'testcrt.cc5daflqza1y.us-west-1.rds.amazonaws.com', 'Port': 3306}, 'ReadReplicaDBInstanceIdentifiers': [], 'DBSubnetGroup': {'Subnets': [{'SubnetStatus': 'Active', 'SubnetIdentifier': 'subnet-aec107c9', 'SubnetAvailabilityZone': {'Name': 'us-west-1a'}}, {'SubnetStatus': 'Active', 'SubnetIdentifier': 'subnet-c6ebff9e', 'SubnetAvailabilityZone': {'Name': 'us-west-1c'}}], 'DBSubnetGroupName': 'default', 'SubnetGroupStatus': 'Complete', 'DBSubnetGroupDescription': 'default', 'VpcId': 'vpc-977356f3'}, 'Engine': 'mysql', 'DBName': 'testDB', 'CACertificateIdentifier': 'rds-ca-2015', 'EngineVersion': '5.6.37', 'DBInstanceClass': 'db.t2.micro', 'PerformanceInsightsEnabled': False, 'DBInstanceArn': 'arn:aws:rds:us-west-1:212791612695:db:testcrt', 'OptionGroupMemberships': [{'OptionGroupName': 'default:mysql-5-6', 'Status': 'in-sync'}], 'PreferredMaintenanceWindow': 'fri:13:24-fri:13:54', 'AutoMinorVersionUpgrade': True, 'CopyTagsToSnapshot': False, 'DBParameterGroups': [{'ParameterApplyStatus': 'in-sync', 'DBParameterGroupName': 'testgeneral'}], 'MultiAZ': False, 'PubliclyAccessible': True, 'DBInstanceStatus': 'available', 'IAMDatabaseAuthenticationEnabled': False, 'StorageType': 'gp2', 'DBSecurityGroups': [], 'StorageEncrypted': False, 'MonitoringInterval': 0, 'VpcSecurityGroups': [{'VpcSecurityGroupId': 'sg-1a73497c', 'Status': 'active'}], 'AvailabilityZone': 'us-west-1a'}, {'LatestRestorableTime': datetime.datetime(2018, 1, 22, 23, 10, tzinfo=tzutc()), 'DomainMemberships': [], 'LicenseModel': 'general-public-license', 'AllocatedStorage': 20, 'PreferredBackupWindow': '06:54-07:24', 'InstanceCreateTime': datetime.datetime(2017, 11, 15, 23, 13, 57, 63000, tzinfo=tzutc()), 'BackupRetentionPeriod': 7, 'DBInstanceIdentifier': 'test2', 'PendingModifiedValues': {}, 'MasterUsername': 'testMaster', 'DbiResourceId': 'db-YQWJXF4XXOAGNJ4XXNEMXNLRCQ', 'DbInstancePort': 0, 'Endpoint': {'HostedZoneId': 'Z10WI91S59XXQN', 'Address': 'testdb.cc5daflqza1y.us-west-1.rds.amazonaws.com', 'Port': 3306}, 'ReadReplicaDBInstanceIdentifiers': [], 'DBSubnetGroup': {'Subnets': [{'SubnetStatus': 'Active', 'SubnetIdentifier': 'subnet-aec107c9', 'SubnetAvailabilityZone': {'Name': 'us-west-1a'}}, {'SubnetStatus': 'Active', 'SubnetIdentifier': 'subnet-c6ebff9e', 'SubnetAvailabilityZone': {'Name': 'us-west-1c'}}], 'DBSubnetGroupName': 'default', 'SubnetGroupStatus': 'Complete', 'DBSubnetGroupDescription': 'default', 'VpcId': 'vpc-977356f3'}, 'Engine': 'mysql', 'DBName': 'testDatabase', 'CACertificateIdentifier': 'rds-ca-2015', 'EngineVersion': '5.6.37', 'DBInstanceClass': 'db.t2.micro', 'PerformanceInsightsEnabled': False, 'DBInstanceArn': 'arn:aws:rds:us-west-1:212791612695:db:testdb', 'OptionGroupMemberships': [{'OptionGroupName': 'default:mysql-5-6', 'Status': 'in-sync'}], 'PreferredMaintenanceWindow': 'tue:09:08-tue:09:38', 'AutoMinorVersionUpgrade': True, 'CopyTagsToSnapshot': False, 'DBParameterGroups': [{'ParameterApplyStatus': 'in-sync', 'DBParameterGroupName': 'testgeneral'}], 'MultiAZ': False, 'PubliclyAccessible': True, 'DBInstanceStatus': 'available', 'IAMDatabaseAuthenticationEnabled': False, 'StorageType': 'gp2', 'DBSecurityGroups': [], 'StorageEncrypted': False, 'MonitoringInterval': 0, 'VpcSecurityGroups': [{'VpcSecurityGroupId': 'sg-e9b7998f', 'Status': 'active'}, {'VpcSecurityGroupId': 'sg-5363fc35', 'Status': 'active'}], 'AvailabilityZone': 'us-west-1c'}]}
            return exampleResponse

    def client(self, awsApplication):
        if (awsApplication == 'rds'):
            return self.mockRDS()
